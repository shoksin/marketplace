version: "2.4"

services:
  api-gateway:
    build: ./api-gateway
    ports:
      - "8000:8000"
    depends_on:
      - auth-service
    env_file:
      - ./api-gateway/.env

  auth-service:
    build: ./auth
    ports:
      - "50051:50051"
    env_file:
      - ./auth/.env
    depends_on:
      auth-db:
        condition: service_healthy

  product-service:
    build: ./product
    ports:
      - "50052:50052"
    env_file:
      - ./product/.env
    depends_on:
      product-db:
        condition: service_healthy

  order-service:
    build: ./order
    ports:
     - "50053:50053"
    env_file:
      - ./order/.env
    depends_on:
      order-db:
        condition: service_healthy

  auth-db:
    image: postgres:latest
    ports:
      - "5433:5432"
    env_file:
      - ./auth/.env
    volumes:
      - auth-db-data:/var/lib/postgresql/data
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 3s
      retries: 5

  product-db:
    image: postgres:latest
    ports:
      - "5434:5432"
    env_file:
      - ./product/.env
    volumes:
      - product-db-data:/var/lib/postgresql/data
    restart: always
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 5s
      timeout: 3s
      retries: 5

  order-db:
    image: postgres:latest
    ports:
      - "5435:5432"
    env_file:
      - ./order/.env
    volumes:
      - order-db-data:/var/lib/postgresql/data
    restart: always
    depends_on:
      product-db:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 3s
      retries: 5

volumes:
  auth-db-data:
  product-db-data:
  order-db-data:
